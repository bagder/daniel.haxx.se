'\" t
.\" Manual page created with latex2man on Sat Aug 19 17:25:25 DST 2000
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "TRIO_PRINTF" "3" "19 August 2000" "libtrio "
.SH NAME
trio_printf, 
trio_fprintf, 
trio_sprintf, 
trio_snprintf, 
trio_snprintfcat, 
trio_aprintf, 
trio_vprintf, 
trio_vfprintf, 
trio_vsprintf, 
trio_vsnprintf, 
trio_vaprintf 
\- formatted output conversion 
.PP
.SH SYNOPSIS
.PP
cc ... \-ltrio \-lm
.PP
#include <trio.h>
.PP
int trio_printf(const char *format, ...);
.br
int trio_fprintf(FILE *file, const char *format, ...);
.br
int trio_dprintf(int fd, const char *format, ...);
.br
int trio_sprintf(char *buffer, const char *format, ...);
.br
int trio_snprintf(char *buffer, size_t max, const char *format, ...);
.br
int trio_snprintfcat(char *buffer, size_t max, const char *format, ...);
.br
int trio_asprintf(char **buffer, const char *format, ...);
.br
int trio_vprintf(const char *format, va_list args);
.br
int trio_vfprintf(FILE *file, const char *format, va_list args);
.br
int trio_vdprintf(int fd, const char *format, va_list args);
.br
int trio_vsprintf(char *buffer, const char *format, va_list args);
.br
int trio_vsnprintf(char *buffer, size_t bufferSize, const char *format, va_list args);
.br
int trio_vasprintf(char **buffer, const char *format, va_list args);
.PP
.SH DESCRIPTION
This documentation is incomplete. 
The documentation of the printf family in [C99] and [UNIX98] also applies 
to the trio counterparts. 
.PP
All these functions outputs a string which is formatted according to the 
.IR "format"
string and the consecutive arguments. The 
.IR "format"
string 
is described in the Formatting section below. 
.PP
.BR "trio_printf"
and 
.BR "trio_vprintf"
writes the output to the 
standard output stream (stdout). 
.PP
.BR "trio_fprintf"
and 
.BR "trio_vfprintf"
writes the output to a given 
output stream. 
.PP
.BR "trio_dprintf"
and 
.BR "trio_vdprintf"
writes the output to a file 
descriptor (this includes, for example, sockets). 
.PP
.BR "trio_sprintf"
and 
.BR "trio_vsprintf"
writes the output into 
.IR "buffer".
.PP
.BR "trio_snprintf"
and 
.BR "trio_vsnprintf"
writes 
.IR "max"
\- 1 
characters into 
.IR "buffer"
followed by a terminating zero character. If 
.IR "max"
is 1, then 
.IR "buffer"
will be an empty string. If 
.IR "max"
is 0, 
then 
.IR "buffer"
is left untouched, and can consequently be NULL.
The number of characters that would have been written to 
.IR "buffer",
had 
there been sufficient space, is returned. 
.PP
.BR "trio_snprintfcat"
appends the formatted text at the end of 
.IR "buffer".
.PP
.BR "trio_asprintf"
and 
.BR "trio_vasprintf"
allocates and returns a 
string in 
.IR "buffer"
containing the formatted text. 
.PP
.SH FORMATTING
.PP
The 
.IR "format"
string can contain normal text and conversion indicators. 
The normal text can be any character except the nil character 
(ASCII 000 = '\\0') and the percent character (ASCII 045 = '%'). 
Conversion indicators consists of an indication character (%), followed by 
zero or more conversion modifiers, and exactly one conversion specifier. 
.PP
NOTE: The examples below are missing the \\n character. This was omitted to 
improve readability. To make trio_printf actually print the formatted text, 
the \\n character must be added to the examples. Furthermore, the | 
character is used to clarify the output. 
.PP
.SS MODIFIERS
.PP
Some modifiers exhibit the same behaviour for all specifiers, other modifiers 
indicate different behaviours for different specifiers, and other modifiers 
are only applicable to certain specifiers. The relationship is described for 
each modifier. The number 9 is used to denotes an arbitary integer. 
.PP
.TP
Positional (9$) [UNIX98]
.br
Normally the arguments supplied to these functions are interpreted 
incrementially from left to right. Arguments can be referenced specifically in 
the format string. The modifier n$ selects the nth argument. The first 
argument is referred as 1$. If this modifier is used, it must be the first 
modifier after the indication character. n$ can also be used for argument 
width, precision, and base.
.br
The performance penalty of using positionals is almost neglible (contrary to 
most other printf implementations).
.br
.RS
.TP
Mixing
.br
Mixing normal and positional specifiers is allowed [TRIO]. For example, 
trio_printf("%d %3$d %2$d", 1, 2, 3);
results in "1 3 2".
.br
Arguments for the printf family are passed on the stack. On most platforms it 
is not possible to determine the size of individual stack elements, so it is 
essential that the format string corresponds exactly to the passed arguments. 
If this is not the case, incorrect values may be put into the result. 
.TP
Reference Gap
.br
For the same reason it is also essential that the format string does not 
contain any "gaps" in the positional arguments. For example, 
trio_printf("%1$d %3$d", 1, 2, 3);
is NOT allowed. The format 
string parser has no knowledge about whether the second argument is, say, an 
integer or a long double (which have different sizes).
.br
[UNIX98] describes this as unspecified behaviour. [TRIO] will detect reference 
gaps and return an error. 
.TP
Double Reference
.br
It is also not allowed to reference an argument twice or more. For example, 
trio_printf("%1$d %1$lf", 1);
is NOT allowed, because it 
references the first argument as two differently sized objects.
.br
[UNIX98] describes this as unspecified behaviour. [TRIO] will detect double 
references and return an error. 
.RE
.RS
.PP
The following two statements are equivalent 
.RS
.RE
.TP
1.
trio_printf("|%d %s|", 42, "meanings");
.br
|42 meanings| 
.TP
2.
trio_printf("|%1$d %2$s|", 42, "meanings");
.br
|42 meanings| 
.RE
.RS
.PP
.RE
.TP
Width (9)
.br
Specifies the minimum width of a field. If the fields has less characters than 
specified by the width, the field will be left adjusted and padded by spaces. 
The adjustment and padding can be changed by the Alignment (\-) and Padding (0) 
modifiers.
.br
The width is specified as a number. If an asterix (*) is used instead, the 
width will be read from the argument list.
.br
Prefixes, such as 0x for hexadecimal integers, are part of width.
.br
.RS
.TP
1.
trio_printf("|%10i|", 42);
.br
|        42| 
.RE
.RS
.PP
.RE
.TP
Precision (.9)
.br
.PP
.RS
.TP
1.
trio_printf("|%10.8i|%.8i|", 42, 42);
.br
|  00000042|00000042| 
.RE
.RS
.PP
.RE
.TP
Base (..9) [TRIO]
.br
Sets the base that the associated integer must be converted to. The base can 
be between 2 and 36 (both included). 
.PP
.RS
.TP
1.
trio_printf("|%10.8.2i|%10..2i|%..2i|", 42, 42, 42);
.br
|  00101010|    101010|101010| 
.TP
2.
trio_printf("|%*.8.*i|", 10, 2, 42);
.br
|  00101010| 
.RE
.RS
.PP
.RE
.TP
Padding (0)
.br
This modifier means that (integer and floating point) numbers are prepended by 
zeros. The number of leading zeros are determined by the precision. If 
precision is not present width is used instead. 
.PP
.TP
Short (h)
.br
The argument is read as an (unsigned) short int.
.PP
.TP
Short short (hh) [C99, GNU]
.br
The argument is read as an (unsigned) char.
.PP
.TP
Largest (j) [C99]
.br
The argument is read as an intmax_t/uintmax_t,
which is 
defined to be the largest signed/unsigned integer. 
.PP
.TP
Long (l)
.br
The argument is read as an (unsigned) long int.
.PP
.TP
Long long (ll) [C99, UNIX98, GNU]
.br
The argument is read as an (unsigned) long long int.
.PP
.TP
Long double (L) [C99, UNIX98, GNU]
.br
The argument is read as a long double.
.PP
.TP
ptrdiff_t (t) [C99]
.br
The argument is read as a ptrdiff_t,
which is defined to be the 
signed integer type of the result of subtracting two pointers. 
.PP
.TP
Quad (q) [BSD, GNU]
.br
Corresponds to the long long modifier (ll). 
.PP
.TP
size_t (z) [C99]
.br
The argument is read as a size_t,
which is defined to be the type 
returned by the sizeof
operator. 
.PP
.TP
size_t (Z) [GNU]
.br
Corresponds to the size_t modifier (z). 
.PP
.TP
Alternative (#)
.br
.PP
.TP
Spacing ( )
.br
.PP
.TP
Sign (+)
.br
Always prepend a sign to numbers. Normally only the negative sign is prepended 
to a number. With this modifier the positive sign may also be prepended. 
.PP
.TP
Alignment (\-)
.br
The output will be left\-justified. 
.PP
.TP
Argument (*)
.br
.PP
.TP
Quote/Grouping (') [MISC]
.br
Groups integers and the integer\-part of floating\-point numbers according to 
the locale. 
.PP
.TP
Sticky (!) [TRIO]
.br
The modifiers listed for the current specifier will be reused by subsequent 
specifiers of the same group.
.br
The following specifier groups exists 
.RS
.TP
.B *
Integers (i, u, d, o, x, X) 
.TP
.B *
Floating\-point (f, F, e, E, g, G, a, A) 
.TP
.B *
Characters (c, C) 
.TP
.B *
Strings (s, S) 
.TP
.B *
Pointer (p) 
.TP
.B *
Count (n) 
.TP
.B *
Errno (m) 
.TP
.B *
Group ([]) 
.RE
.RS
.PP
The sticky modifiers are active until superseeded by other sticky modifiers, 
or the end of the format string is reached.
.br
Local modifiers overrides sticky modifiers for the given specifier only. 
.PP
.RS
.RE
.TP
1.
trio_printf("|%!08#x|%04x|%x|", 42, 42, 42);
.br
|0x00002a|0x2a|0x00002a| 
.RE
.RS
.PP
.RE
.TP
Allocate (<alloc>) [TRIO]
.br
.PP
.SS SPECIFIERS
.PP
.TP
Percent (%)
.br
Produce a percent (%) character. This is used to quote the indication 
character. No modifiers are allowed. The full syntax is "%%". 
.PP
.RS
.TP
1.
trio_printf("Percent is %%");
.br
Percent is % 
.RE
.RS
.PP
.RE
.TP
Hex floats (a, A) [C99]
.br
Output a hexadecimal (base 16) representation of a floating point number. The 
number is automatically preceeded by 0x (or 0X). The exponent is 'p' (or 'P'). 
.PP
.RS
.TP
1.
trio_printf("|%a|%A|", 3.1415, 3.1415e20);
.br
|0x3.228bc|0X3.228BCP+14| 
.RE
.RS
.PP
.RE
.TP
Binary numbers (b, B) [MISC \- SCO UnixWare 7]
.br
DEPRECATED: Use Base %..2i instead. 
.PP
.TP
Character (c)
.br
Output a single character. 
.RS
.TP
.B *
Quote (') [TRIO]
.br
Quote the character 
.RE
.RS
.PP
.RE
.TP
Decimal (d)
.br
Output a decimal (base 10) representation of a number. 
.RS
.TP
.B *
Grouping (') [TRIO]
.br
The number is separated by the locale thousand separator. 
.RE
.RS
.PP
Assuming the thousand separator is comma and the grouping is set to 3 
.RS
.RE
.TP
1.
trio_printf("|%'ld|", 1234567);
.br
|1,234,567| 
.RE
.RS
.PP
.RE
.TP
Floating\-point (e, E)
.br
Output a decimal floating\-point number. 
The style is 
.BR "[\-]9.99e[\-]9",
where 
.RS
.TP
.BR "[\-]9.99"
is the mantissa (as described for the f, F specifier), 
.TP
.BR "e[\-]9"
is the exponent indicator (either e or E, depending on the floating\-point specifier), followed by an optional sign and the exponent 
.RE
.RS
.PP
.RE
.TP
Floating\-point (f, F)
.br
Output a decimal floating\-point number. 
The style is 
.BR "[\-]9.99",
where 
.RS
.TP
.BR "[\-]"
is an optional sign (either + or \-), 
.TP
.BR "9"
is the integer\-part (possibly interspersed with thousand\-separators), 
.TP
.BR "."
is the decimal\-point (depending on the locale), and 
.TP
.BR "99"
is the fractional\-part. 
.RE
.RS
.PP
The following modifiers holds a special meaning for this specifier 
.RS
.RE
.TP
.B *
Alternative (#) [C99]
.br
Add decimal point. 
.TP
.B *
Grouping (') [TRIO]
.br
Group integer part of number into thousands. 
.RE
.RS
.PP
.RE
.TP
Floating\-point (g, G)
.br
Output a decimal floating\-point representation of a number. The format of 
either the f, F specifier or the e, E specifier is used, whatever 
produces the shortest result. 
.PP
.TP
Integer (i)
.br
Output a signed integer. Default base is 10. 
.PP
.TP
Errno (m) [GNU]
.br
.PP
.TP
Count (n)
.br
Insert into the location pointed to by the argument, the number of octets 
written to the output so far. 
.PP
.TP
Octal (o)
.br
Output an octal (base 8) representation of a number. 
.PP
.TP
Pointer (p)
.br
Ouput the address of the argument. The address is printed as a hexadecimal 
number. If the argument is the NULL
pointer the text "(nil)" will be 
used instead. 
.RS
.TP
.B *
Alternative (#) [TRIO]
.br
Prepend 0x 
.RE
.RS
.PP
.RE
.TP
String (s)
.br
Output a string. The argument must point to a zero terminated string. If the 
argument is the NULL
pointer the text "(nil)" will be used 
instead. 
.RS
.TP
.B *
Quote (') [TRIO]
.br
Quote the string. 
.TP
.B *
Alternative (#) [TRIO]
.br
Non\-printable characters are converted into C escapes, or hexadecimal numbers 
where no C escapes exists for the character. The C escapes, the hexadecimal 
number, and all backslashes are prepended by a backslash (\\). The known 
C escapes are 
.RS
.TP
\\a (ASCII 007) = alert 
.TP
\\b (ASCII 010) = backspace 
.TP
\\f (ASCII 014) = formfeed 
.TP
\\n (ASCII 012) = newline 
.TP
\\r (ASCII 015) = carriage return 
.TP
\\t (ASCII 011) = horizontal tab 
.TP
\\v (ASCII 013) = vertical tab 
.RE
.RS
.PP
.RE
.RE
.PP
.RS
.RE
.TP
1.
trio_printf("|One %s Three|One %'s Three|", "Two", "Two");
.br
|One Two Three|One "Two" Three| 
.TP
2.
trio_printf("|Argument missing %s|", NULL);
.br
|Argument missing (nil)| 
.TP
3.
trio_printf("|%#s|", "\\007 \\a.");
.br
|\\a \\a.| 
.RE
.RS
.PP
.RE
.TP
Unsigned (u)
.br
Output an unsigned integer. Default base is 10. 
.PP
.TP
Hex (x, X)
.br
Output a hexadecimal (base 16) representation of a number. 
.RS
.TP
.B *
Alternative (#)
.br
Preceed the number by 0x (or 0X). The two characters are counted as part of 
the width. 
.RE
.RS
.PP
.RE
.PP
.SH RETURN VALUES
All functions returns the number of outputted characters. If an error occured 
then a negative error code is returned [TRIO]. Note that this is a deviation 
from the standard, which simply returns \-1 (or EOF) and errno set 
appropriately. 
The error condition can be detected by checking whether the function returns 
a negative number or not, and the number can be parsed with the following 
macros. The error codes are primarily intended as debugging aide for the 
developer. 
.PP
Example: 
.PP
.Vb
int rc;

rc = trio_printf("\\%r", 42);
if (rc < 0) {
  if (TRIO_ERROR_CODE(rc) != TRIO_EOF) {
    trio_printf("Error: \\ at position \\0\\n",
                TRIO_ERROR_NAME(rc),
                TRIO_ERROR_POSITION(rc));
  }
}
.Ve
.PP
.SH SEE ALSO
.I "trio_scanf"
(3)
.PP
.SH CONFORMING TO
Throughout this document the following abbreviations have been used to 
indicate what standard a feature conforms to. If nothing else is indicated 
ANSI C (C89) is assumed. 
.RE
.TP
C89
ANSI X3.159\-1989 
.TP
C99
ISO/IEC 9899:1999 
.TP
UNIX98
The Single UNIX Specification, Version 2 
.TP
BSD
4.4BSD 
.TP
GNU
GNU libc 
.TP
MISC
Other non\-standard sources 
.TP
TRIO
Extensions specific for this package 
.PP
.SH LEGAL ISSUES
Copyright (C) 1998\-2000 Bjorn Reese and Daniel Stenberg. 
.PP
Permission to use, copy, modify, and distribute this software for any 
purpose with or without fee is hereby granted, provided that the above 
copyright notice and this permission notice appear in all copies. 
.PP
THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED 
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF 
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND 
CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER. 
.\" NOTE: This file is generated, DO NOT EDIT.
